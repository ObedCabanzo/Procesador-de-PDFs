The utilized wiring scheme has been illustrated in Fig. 9. The mobile device has been connected to the BBB USB host port. BBB device port has been connected to the victim’s PC host port. This allowed to create the main communication channel on which we were listening and modifying the passing communication. The communication between the attacker machine and the BBB was realized over the Ethernet network.

To intercept USB traffic we utilized the most recent version of the USBProxy. As the latest release was issued quite a long time ago we decided to use current HEAD of master branch which at the time of writing was: 4fc16ed86a1c60a391a183e9b3f14251e8c1118c.

To intercept ADB traffic we developed our own tool called adb-mitm on top of the USBProxy. It uses plug-in API to provide both PacketFilter and Injector functionalities. Note that the authentication process does not require any user interaction and may be executed whenever adbd is running on the device.

# 90
# c o m p u t e r s & s e c u r i t y 8 2 ( 2 0 1 9 ) 8 0 – 9 8
# USB
# Victim PC
# Attacker
# USB MitM Device
# Victim Mobile Device
# Attacker PC
It is worth noting that when the USB debugging option is enabled adbd is running automatically, each time the user plugs in USB cable. There is no pop-up displayed like in the case of the MTP where it happens each time the user connects the device. Therefore it is potentially a perfect attack vector to bypass the lock screen and get full access to the device.

First, we tried to perform the replay attack. Fortunately, thanks to randomness of 20 bytes in the A_AUTH TOKEN challenge message this attack cannot be successful. However, the ADB protocol traffic analysis revealed that the A_AUTH SIGNATURE is the only message which has to be generated using suitable private key. There is no data integrity mechanism in any other step of the ADB communication. This effectively means that after receiving the A_AUTH SIGNATURE message with a valid signature mobile device will grant access to any sender of the message in this communication channel even if it does not own the corresponding private key. Therefore, the only thing that is needed to bypass the screen lock is to acquire a valid signature from the trusted host machine.

This in turn can be easily achieved using our experimental test-bed. The only thing that needs to be achieved is to use USBProxy and allow the whole authentication process to complete successfully. Then everything is performed automatically and when the host is authenticated we may just disconnect the BBB from the host. As we disconnect only BBB from the host but not the device from the BBB, the mobile device assumes that it is still communicating with the same machine that provided a correct signature during the initial authentication process. Thus BBB is now able to send any custom command which effectively gives access to all user’s private data without unlocking the device screen.

The communication flow for this attack has been presented in Fig. 11.

# 6. Data modification
This type of attack aims at (mostly) unnoticeable message modification, usually to perform some malicious activities e.g. to infect a phone or a host.

The basic idea of this attack is quite straightforward and simple. Neither USB protocol provides any integrity mechanisms nor ADB protocol does. This allows MitM device to modify the USB traffic between the host and the device.

Instead of getting in between the mobile device and the trusted host, it is possible to use BadUSB-like attack to create a device which will act as an Android-based phone and will send.

The modification of the USB traffic may occur in one of two phases: during the session creation (host authentication) or after it is completed.

# Computers & Security 82 (2019) 80–98
# Packet Filter
# Server
Modifications during session initialization may be used, for example, to trick the user to accept some external RSA key as trusted. This may be achieved by replacing RSA public key sent by the host in the A_AUTH RSAPUBLICKEY message with some key provided by the attacker. Obviously, the user should check MD5 checksum and verify whether it matches the host's associated private key. This allows the attacker to safely spread his public key across many devices without the risk of his private key being compromised.

Lesson learned #2: this “vulnerability” is possible by exploiting the human factor. Most of the inexperienced users do not verify their host key fingerprint before accepting it. They find it...

# 92
# c o m p u t e r s & s e c u r i t y 8 2 ( 2 0 1 9 ) 8 0 – 9 8
A_CNXN(&lt;versionz, &lt;maxpz, &lt;system strz)                                                       A CNXN(&lt;version&gt;, &lt;maxpz, &lt;system str&gt;)
A_AUTH(TOKEN, RND)                                                                      A AUTH(TOKEN, RND)
A_AUTH(SIGNATURE, SIGN(Priv, RND))                                                           A_AUTH(SIGNATURE, SIGN(Priv; RND))
A CNXN(&lt;version&gt; , &lt;maxp&gt; , &lt;system str&gt;)
A_OPEN(&lt;id1&gt; , 0, "shell" )
A_OKAY(&lt;id2&gt; , &lt;id1&gt;)
A_CNXN(&lt;versionz, &lt;maxpz, &lt;system strz)
A AUTH(TOKEN, RND)                                       RND                                   Trigger enumeration
A CNXN(&lt;versionz , &lt;maxpz, &lt;system strz)
A AUTH(TOKEN, RND)
A_AUTH(SIGNATURE, SIGN(Priv, RND))                         SIGN(Priv; RND)                            A AUTH(SIGNATURE, SIGN(Priv, RND))
Disconnect
A CNXN(&lt;version&gt; , &lt;maxp&gt;, &lt;system str&gt;)
A OPEN(&lt;id1&gt; , 0, "shell
A_OKAY(&lt;id2&gt; , &lt;id1&gt;)
complicated, as it is not possible to get this fingerprint easily using adb command line tool. If this would be as easy as executing adb fingerprint command then most probably more developers would use it. Even better results could be achieved by replacing user unfriendly MD5 checksums with the verification of the random art of the host key or QR code usage. This could improve users’ experience and encourage more of them to verify if what they are accepting is really correct.

Modifications of the data being sent during the ADB session may be used in many ways. The first example of such an attack may be injection of some malicious payload into files or shell commands sent over the USB bus. This involves mostly modification of the files transferred over the bus to infect them with some malware that is able to exploit other bugs in the Android or PC OSes. A good example would be to modify shell commands to exploit some vulnerabilities in the Android shell (which can be considered as a kind of Shellshock attack variant, Response, 2014).

The second example is based on the ransomware-like (ran, 2016) idea which is (unfortunately) currently gaining more traction among cyber-criminals. In the beginning the attacker may just want to analyze the traffic to identify resources which are important for the victim. Then, when the user tries to access these critical resources once again (for example the list photos), his request may be replaced with the one that encrypts this content. A simplified scenario of such an attack which removes all photos instead of listing them has been
# Computers & Security 82 (2019) 80–98
A OPEN(<id1>, 0, "shell")
A OKAY(<id2>, <id1>)
A_WRTE(<id2>, <id1>, "shell@dev: $\'
A OKAY(<id1>, <id2>)
A_WRTE(<id1>, <id2>, "rm -rf my_photos")
A OKAY(<id2>, <id1>)
To make the adb-mitm tool more flexible it does not provide any of these scenarios but instead it just provides a plug-in framework which allows everyone to implement their own data change algorithm.

Lesson learned #3: the root cause of this vulnerability is once again the lack of session integrity mechanisms in the ADB protocol. It must be emphasized that currently no mechanism exists which could enforce opened streams integrity.

# 6. Data injection
This type of attack aims at unnoticeable injection of the custom messages into authenticated ADB sessions. The basic concept of this attack is to allow the authentication phase to complete successfully just like in the case of session hijacking attack. However, after this phase, the mobile device is not being disconnected from the victim PC but it is still available and usable. This means that the user may utilize the device via ADB and our MitM device can inject some messages to provide parallel access to the device to the user and to the attacker.

The key ADB functionalities such as shell access, remote debugging, apps installing is provided using the base streams abstraction via the ADB protocol. Data is being sent across the stream by issuing the A_WRTE command by the host or the device. Therefore, the first idea to abuse ADB protocol and inject some custom data is to inject some A_WRTE command to, for example, opened shell stream. This allows to inject arbitrary shell commands to the active shell section without host even noticing this.