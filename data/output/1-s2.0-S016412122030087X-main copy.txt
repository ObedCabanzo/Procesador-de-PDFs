**Identifying vulnerabilities of SSL/TLS certificate verification in Android apps with static and dynamic analysis**
Many Android developers fail to properly implement SSL/TLS during the development of an app, which may result in Man-In-The-Middle (MITM) attacks or phishing attacks. In this work, we design and implement a tool called DCDroid to detect these vulnerabilities with the combination of static and dynamic analysis. In static analysis, we focus on four types of vulnerable schema and locate the potential vulnerable code snippets in apps. In dynamic analysis, we prioritize the triggering of User Interface (UI) components based on the results obtained with static analysis to confirm the misuse of SSL/TLS.
With DCDroid, we analyze 2213 apps from Google Play and 360app. The experimental results show that 457 (20%) apps contain potential vulnerable code. We run apps with DCDroid on two Android smartphones and confirm that 245 (11%) of 2213 apps are truly vulnerable to MITM and phishing attacks. We propose several strategies to reduce the number of crashes and shorten the execution time in dynamic analysis. Comparing with our previous work, DCDroid decreases 57% of the number of apps’ crash and 32% of the execution time on average. It also outperforms other three tools, namely, AndroBugs, kingkong, and appscan, in terms of detection accuracy.
**1. Introduction**
SSL/TLS certificates can lead to Man-In-The-Middle (MITM) attacks and phishing attacks. In the process of MITM attack or phishing attack, attackers impersonate the server to intercept and even modify app traffic to obtain sensitive data. In general, an attacker is not able to decrypt Google’s network traffic. However, if the client blindly trusts any certificate without checking the signatures, or does not verify the host name, or ignores the verification error prompts, the attacker can impersonate the server to gain the trust of the client using a fake certificate, and then decrypt the traffic to obtain sensitive data during the attack.
Existing efforts have been made on the detection of malicious apps. Our previous work detected malicious apps, analyzed privacy leakage, and detected or prevented various vulnerabilities in Android applications.
The text discusses the detection of SSL/TLS vulnerabilities in Android applications, highlighting the limitations of existing methods and introducing a new tool called DCDroid. The authors note that previous approaches often required manual analysis and focused primarily on detecting malicious apps rather than vulnerabilities. They identify several issues with existing methods, such as app crashes during detection and a high number of false positives.
To address these challenges, the authors redesigned their detection tool, DCDroid, which combines static and dynamic analysis along with traffic analysis. The static analysis involves disassembling the app to locate vulnerable code, while dynamic analysis runs the app to ensure stable detection. The tool also captures traffic to reduce false positives.
The authors present their contributions, including the automated detection of SSL/TLS vulnerabilities in 2213 apps, identifying 457 as vulnerable through static analysis and confirming 245 as truly vulnerable through dynamic analysis. They emphasize the importance of starting the activity of vulnerable code from the main activity to enhance stability and reduce crashes.
The background section explains the role of SSL/TLS in protecting against MITM attacks and the importance of certificate verification. It outlines the correct verification process and discusses the vulnerabilities that can arise when developers implement their own certificate verification methods, often leading to insecure practices.
Overall, the text provides insights into the development of a more effective tool for detecting vulnerabilities in Android applications, emphasizing the need for robust security measures in app development.
The text discusses various aspects of Android UI and network interactions, particularly focusing on vulnerabilities related to SSL/TLS implementations. It outlines the structure of Android applications, including Activities and Views, and explains how these components interact with each other. The text also introduces DCDroid, an automated tool designed to simulate human operations on UI elements, emphasizing its ability to identify and trigger potential vulnerabilities in apps.
Key points include:
1. **Android UI Structure**: The UI is represented as a directed graph where Activities and Services are nodes, and intents are edges. The Main Activity serves as the starting point for traversing this graph.
2. **Human Operation Simulation**: DCDroid analyzes UI elements to perform actions like inputting text or clicking buttons, aiming to trigger vulnerable code effectively.
3. **MITM Attacks**: The text explains how a Man-in-the-Middle (MITM) attack can intercept communications between a client and server, highlighting the importance of certificate verification to prevent such attacks.
4. **Challenges in Vulnerability Detection**: The text identifies challenges in defining and triggering potential vulnerable code, including the need for effective static and dynamic detection methods to ensure comprehensive coverage of vulnerable apps.
5. **Traffic Analysis**: It discusses the difficulty in accurately identifying traffic generated by specific apps, especially when multiple apps are running simultaneously.
6. **Method Framework**: The section concludes by outlining the framework for the proposed method, which includes both static and dynamic detection processes to identify vulnerabilities in Android applications.
4. System overview
An overview of DCDroid is presented. Given an app, we first conduct static analysis. We disassemble the app to get the Smali file and then locate the vulnerable points according to the characteristics of the vulnerable code. By analyzing the method call relationships, we get the vulnerable entry Activity. We then start dynamic detection, install the app into the smartphone with the ADB management tool, and start to run the app to trigger the potential vulnerable code. We intercept traffic with MITM attack tools and use VPNService to capture traffic on smartphones. Finally, we confirm those true vulnerable apps by comparing the traffic between the smartphone and the attack tool.
4. Static analysis
4. Disassembling apps
Android apps can be decompiled into Java code or disassembled into Smali code directly. We choose to disassemble an app into Smali code because we only need to analyze the call relationship of the code without knowing its design. Smali code can be disassembled faster and is less affected by confusion technology. It can be done with apktool. Androguard can analyze its call relationships.
4. Vulnerable code analysis
Based on existing related work and disassembling 100 typical vulnerable apps manually, we propose 4 types of vulnerable code. A typical vulnerable code is characterized by methods that return void directly without any check. The types of vulnerabilities include:
- **X509TrustManager**: We check if the code extends the X509TrustManager class. If it happens, we check the checkClientTrusted and checkServerTrusted methods to see if the method has only one instruction which is return-void. If so, we consider the method vulnerable.
- **HostNameVerifier**: We check whether the HostnameVerifier interface is implemented in the code. If it exists, we check the verify method. If the method has only two instructions, and the first instruction begins with const and the second instruction is return, we then consider the method vulnerable.
- **WebViewClient sslError**: We check whether the code extends the WebViewClient class. If that happens, we check the onReceivedSslError method. If this method has only two instructions, and the first instruction starts with invoke-virtual and ends with Landroid/webkit/SslErrorHandler;->proceed()V, and the second instruction is return void, we then consider this method vulnerable.
- **X509HostnameVerifier**: We check whether there is an instruction named sget-object in the class which extends X509TrustManager class. If that happens, we check the relevant methods for vulnerabilities.
The text appears to be an excerpt from a research paper discussing methods for analyzing vulnerabilities in Android applications. It outlines algorithms for identifying entry points associated with vulnerable methods and describes the construction of Activity Call Graphs (ACGs) to trace method call relationships.
Key points include:
1. **Vulnerability Analysis**: The text describes a process for identifying vulnerable methods in an application and analyzing their call relationships to determine entry points.
2. **Method Call Graph (MCG)**: The MCG is used to trace the relationships between methods, helping to identify how vulnerable methods are called within the application.
3. **Entry Points**: The algorithms aim to find entry points (like Activities and Services) where vulnerable methods are executed, which is crucial for dynamic detection during security assessments.
4. **Algorithm Descriptions**: Two algorithms are presented:
- **Find Final Caller of Vulnerable Method**: This algorithm identifies the final caller of a vulnerable method by traversing the MCG.
- **Build Activity Call Graph (ACG)**: This algorithm constructs the ACG based on potential vulnerable views defined in the Android manifest.
5. **Dynamic Analysis**: The text emphasizes the importance of dynamic analysis, where the identified entry points are executed to test for vulnerabilities in real-time.
Overall, the excerpt provides insights into the methodologies used for vulnerability detection in Android applications, focusing on the relationship between methods and their execution paths.
4. Dynamic analysis
4. UI Automation
UI automation is the core component of DCDroid. It makes an app run to the direction that vulnerable code can be executed and avoids meaningless execution. There are three tasks for UI automation components: obtain UI elements and operate them, reduce UI elements and determine priorities, run app and manage UI status. When the app enters an Activity, it needs to get every element of the Activity and extract the attributes of the element, such as the text of the button and the input form of the text box. With the information obtained, the system creates appropriate events to operate elements so that Activity can jump from one to another normally. For example, select events are created for check boxes and input events are created for text boxes. To achieve this goal, we use the AndroidViewClient to manage components. It can get the UI elements, create appropriate events for the UI elements and execute the dynamic operation of a specific app.
4. Acceleration
In order to accelerate the operation, we select only a part of UI elements to execute from similar elements. Through our analysis, we find that it is appropriate to select four to execute for similar elements. This strategy can speed up our dynamic detection process by avoiding meaningless execution of duplicate elements while ensuring that similar UI elements with different code logic are executed.
4. Set proxy
In order to execute a SSL/TLS MITM attack, all traffic between Android clients and servers must be intercepted. We use mitmproxy as a MITM attack tool. Mitmproxy is a proxy tool that forwards requests and executes MITM attacks like a normal proxy. It generates its own fake certificate and sends it to the client to start an attack. We do not add mitmproxy certificates to the host’s trust certificate list, ensuring that only HTTPS traffic generated by vulnerable apps can be established. The biggest advantage of mitmproxy is that it can manage intercepted requests using Python scripts, which helps analyze intercepted requests.
4. Traffic analysis
In the MITM attack tool, we can only get all the traffic intercepted. However, we are not sure which app generates the traffic. Therefore, it is necessary to identify which app generates the traffic. We use Android’s VPNService interface to capture network packets on the client side. The method involves reading data from the virtual NIC and saving or changing packets. By comparing the IP of PID and its URLs, we can get the corresponding relationship between each HTTPS traffic and the app.
The text discusses the analysis of mobile applications for vulnerabilities, focusing on both static and dynamic detection methods. The dataset includes apps from two markets: 360app and Google Play, with a total of 2213 apps analyzed.
In static analysis, the apps were disassembled using apktool, revealing that 30 apps could not be disassembled successfully. The results indicated that 457 apps (20%) contained potentially vulnerable code, while 1726 apps were free from such vulnerabilities.
Dynamic analysis involved running the apps on Android devices to confirm vulnerabilities. The results showed that 245 apps were identified as having certificate validation vulnerabilities, which accounted for 53% of the potentially vulnerable codes. The analysis highlighted the challenges of dynamic detection, including the risk of app crashes during testing.
The text emphasizes the importance of both static and dynamic analysis in identifying vulnerabilities in mobile applications, noting that while static detection can identify potential issues, dynamic analysis is necessary to confirm these vulnerabilities.
The text discusses the analysis of vulnerabilities in mobile applications, particularly focusing on the results obtained from different tools used to detect these vulnerabilities. It highlights the number of vulnerabilities found in various categories of apps, such as News & Books, Finance, and Health & Medical, with a specific emphasis on the percentage of vulnerable apps in the 360app compared to Google Play.
The analysis indicates that the percentage of certificate validation vulnerabilities is higher in 360app (12%) than in Google Play (9%). The authors also mention improvements in their dynamic analysis methods, which have led to a significant reduction in app crashes and execution time. They report a decrease in the average number of crashes per app from 4 to 1 and a reduction in average execution time from 271 seconds to 183 seconds.
Furthermore, the authors randomly selected 30 apps with certificate verification vulnerabilities to analyze their historical versions. They found that many apps with lower versions tend to have vulnerabilities, especially when higher versions exist. The analysis suggests that apps developed by the same organization often share similar vulnerabilities, and older versions may lack proper security measures like SSL/TLS.
Overall, the findings underscore the importance of continuous monitoring and updating of mobile applications to mitigate vulnerabilities, especially those arising from third-party SDKs.
The complexity of the code increases, vulnerabilities are more likely to occur. The use of third-party libraries may also increase such vulnerabilities. Based on our analysis, if a vulnerability is invoked, the probability of fixing it in later versions is very small. For example, only one app has completely fixed a specific vulnerability without introducing new ones.
DCDroid implements automatic detection of digital certificate verification vulnerabilities through static and dynamic detection. While effective, it has limitations. In static detection, we check vulnerable code, such as methods with simple instruction-returns. However, some code may have complex implementations that ultimately do not conduct verification, leading to false negatives. Compared to other tools like AndroBugs, DCDroid does not show better results in static detection, likely due to different detection rules. However, DCDroid can reduce false positives with dynamic analysis.
In dynamic detection, to speed up execution, we delete similar UI components. Although this generally does not change detection results, we cannot estimate the number of false negatives caused by this deletion. Additionally, some dynamic analyses require specific trigger conditions, which may also lead to false negatives.
Static analysis can detect other vulnerabilities if detection rules are defined. Dynamic analysis can be used for other detections, but it requires specific verification methods, such as setting a proxy for SSL/TLS vulnerability detection. Developers should be cautious during development and adhere to specifications, especially when referencing third-party libraries.
Information security has been widely studied, with privacy issues such as identity privacy and search privacy being significant research topics. Various models and algorithms have been proposed to address privacy concerns, including rank-based attack models and tools for detecting fraud and malware in Android apps. Studies have shown various privacy problems and proposed solutions for pattern privacy leakage and other security issues in Android ecosystems.
The text discusses various tools and methods for analyzing vulnerabilities in Android applications, particularly focusing on SSL/TLS vulnerabilities. It highlights the limitations of existing tools, such as their inability to dynamically trigger vulnerabilities or their reliance on manual analysis. The authors propose a new tool called "DCDroid," which aims to identify vulnerabilities in SSL/TLS digital certificate verification in Android systems. They conducted extensive experiments on a large number of apps from Google Play and 360app, revealing a significant percentage of apps with potential security risks. The findings indicate that DCDroid is effective in detecting these vulnerabilities and analyzing the characteristics of vulnerable apps. Future work will focus on developing mechanisms to automatically patch the identified vulnerabilities.
The text appears to be a collection of references and citations from a research paper, primarily focused on topics related to Android security, intrusion detection, and privacy issues. Here’s a summary of the key points without including any images, headers, footers, figures, tables, citations, references, or authors:
1. **Android Security**: The text discusses various methods and frameworks for enhancing security in Android applications, including SSL usage vetting and dynamic privacy leakage analysis.
2. **Intrusion Detection**: Several studies are referenced that focus on intrusion detection techniques, including the use of non-negative matrix factorization and principal component analysis to identify anomalies in network traffic and application behavior.
3. **Malware Detection**: The text highlights approaches for detecting malicious applications on Android, utilizing machine learning and hybrid models to analyze application behavior and permissions.
4. **Privacy Risks**: There is an emphasis on understanding and mitigating privacy risks associated with third-party libraries and analytics in Android applications.
5. **Data Handling**: The references include discussions on handling massive data streams for real-time anomaly detection and the importance of effective data representation for intrusion detection.
6. **Automated Tools**: The text mentions various automated tools and frameworks developed for detecting vulnerabilities in Android applications, particularly focusing on SSL/TLS certificate verification and other security flaws.
This summary encapsulates the main themes and findings related to Android security and intrusion detection as presented in the text.
Y. Wang, G. Xu, and X. Liu et al. discuss various aspects of mobile security and information technology in their research. The text highlights the academic backgrounds and research interests of several contributors, including Chengxiang Si, who focuses on networks and information security, and Witold Pedrycz, who specializes in computational intelligence and software engineering. Guanquan Xu's work revolves around cyber security and trust management, while Xing Liu's research interests lie in mobile security and privacy. Wei Wang has a background in control science and engineering, with a focus on mobile, computer, and network security. Weixuan Mao, a Security Engineer, is involved in intrusion detection and data-driven security analysis. The document emphasizes the collaborative nature of their research and the contributions made by each individual in the field of information security.